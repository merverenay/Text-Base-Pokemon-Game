

This project implements a Dungeon Generator in C that creates a procedurally generated dungeon 
with rooms, corridors, and staircases, ensuring connectivity between all rooms.

The dungeon is displayed as an ASCII grid:
- **`.`** : Rooms
- **`#`** : Corridors
- **`<`** : Up staircases
- **`>`** : Down staircases
- **` `** : Rock (walls)

## Features
Random Room Placement: Ensures non-overlapping rooms within a bounded grid.
Minimum Spanning Tree (MST) Corridor Connection: Connects rooms using an MST algorithm for efficiency.
Corridor Zigzagging: Adds randomized movement to corridors for a more natural layout.
Staircase Placement: Ensures at least one up and down staircase in different rooms.
Dungeon Hardness Matrix: Implements hardness levels for walls and floors to support future pathfinding.
Dungeon Save/Load System: Allows saving and loading the dungeon state to/from a file.

Pathfinding for Monsters: Implements Dijkstra’s Algorithm for:
Non-tunneling monsters, which navigate through walkable spaces.
Tunneling monsters, which calculate movement costs based on wall hardness.

Monster Generation & AI Behavior
The number of monsters is set via --nummon (default: 10).
Each monster has a hexadecimal identifier (0-9, a-f) that represents its behavior.
Each monster has a speed between 5-20.
Each monster has a priority queue event for movement.

Monster AI Types Implemented:
Intelligence (0x1 bit): Smart monsters use Dijkstra's algorithm for shortest pathfinding.
Telepathy (0x2 bit): Always knows where the PC is.
Tunneling (0x4 bit): Can dig through walls by reducing hardness.
Erratic (0x8 bit): Moves randomly 50% of the time.

Pathfinding Using Dijkstra's Algorithm
Two separate maps for tunneling and non-tunneling monsters.
Monsters use the shortest path according to their abilities. with pc movement these update

The game runs as a discrete event simulator.
Characters (PC and monsters) act based on speed.
Each entity generates an event when created.
Priority queue determines movement order based on 1000/speed.

Ncurses User Interface: Provides real-time visual feedback, handles unbuffered input, and redraws automatically.

PC Manual Control: Move PC using Vim-like keys (ykuhlnbj) or numeric keypad (12346789), including >, <, m, and Q.

Staircase Transitions: Moving onto > or < and pressing the corresponding key regenerates the dungeon with a new layout and monsters.

Monster List View (m key):Pressing m displays a scrollable list of monsters using ncurses.Shows distance and direction from PC.Use up/down arrows or w/s to scroll, q to exit.

Fog of War `f`:  
Toggle visibility. When enabled, only tiles within the PC’s light radius are shown. Previously seen areas are remembered.
 
Teleportation Mode`g`:  
Press `g` to enter teleport mode. Move the cursor using movement keys.  
Press `g` again to teleport to the selected location (valid tiles only).  
Press `r` for random teleportation.  
Press `ESC` to cancel teleport mode.

Implemented parsing of object templates from object_desc.txt, including support for fields like NAME, DESC, COLOR, TYPE, SYMB, and all 8 dice attributes.

Added ObjectDescription class as a factory for creating Object instances.

Created Object class to represent instantiated items placed in the dungeon.

Rolled values for all dice attributes except DAM during instantiation; DAM remains as a Dice object.

Ensured artifacts are only generated once per game session using generatedArtifacts set.

Objects are placed randomly in rooms and rendered with correct colors and symbols using ncurses.

Integrated object rendering into drawDungeon(), supporting overlap with player and monsters.

Cleaned up dynamically allocated objects when regenerating the dungeon or quitting the game.

PC Inventory & Equipment
Inventory: 10 carry slots (0–9).

Equipment: 12 slots (a–l), one for each item type:

WEAPON, OFFHAND, RANGED, ARMOR, HELMET, CLOAK, GLOVES, BOOTS, AMULET, LIGHT, RING 1, RING 2

Key	Function
i	View PC inventory.
e	View equipped items.
w	Wear item from inventory (swap if slot occupied).
t	Take off item (returns to inventory).
d	Drop item on the floor.
x	Expunge item from the game.
I	Inspect item in inventory.
L	Look at a monster (target with movement keys, press t to view details).

Multi-round Combat: PC and monsters now have hitpoints.

Bare-handed Damage: PC deals 0+1d4 if no weapon is equipped.

Equipment Damage: All equipped item damage dice are rolled and added.

Speed Bonus: Equipment speed bonuses are added to the PC’s base speed (10).

PC Death: Game ends when PC’s HP drops below 0.

Monster Death: Monster disappears from the dungeon when HP reaches 0.

HP Regeneration
PC Auto-Regenerates 1 HP every 20 turns.
Regeneration only occurs if HP < max (50).
Turn-based check is handled efficiently using lastHpRegenTurn.
Updated L Press L to enter look mode.
Use movement keys (h, j, k, l, etc.) to move the targeting cursor.
If a monster is under the cursor, press t to view:
Monster symbol, HP, speed, color, and abilities.
If an item is under the cursor, press t to view:
Item name, symbol, color, and description.


##  Build & Run Instructions

###  Build the Project
make

### ▶Run the Game (Default: 10 Monsters)
make run

###  Run with Custom Monster Count
make run ARGS="--nummon 5"

You can replace `20` with any number from `1` to `MAX_MONSTERS` (default is 10, max is 20).


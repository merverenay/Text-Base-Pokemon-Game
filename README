# 🧱 Dungeon Game (C + ncurses)

This project implements a **Dungeon Generator** in C that creates a **procedurally generated dungeon** with rooms, corridors, and staircases, ensuring connectivity between all rooms.  
It also includes **monster AI**, **pathfinding**, **inventory management**, and an **interactive ncurses-based terminal UI**.

---

## 🗺️ Dungeon Overview

The dungeon is displayed as an **ASCII grid**:

| Symbol | Meaning         |
|:-------:|:----------------|
| `.`     | Room floor      |
| `#`     | Corridor        |
| `<`     | Up staircase    |
| `>`     | Down staircase  |
| ` `     | Rock / Wall     |

---

## ⚙️ Features

### 🏗️ Dungeon Generation
- **Random Room Placement:** Ensures non-overlapping rooms within a bounded grid.  
- **MST Corridor Connection:** Connects rooms using a Minimum Spanning Tree algorithm for efficiency.  
- **Corridor Zigzagging:** Adds randomized variation for a more natural layout.  
- **Staircase Placement:** Guarantees at least one up and one down staircase in separate rooms.  
- **Hardness Matrix:** Assigns hardness levels for walls and floors to support tunneling and pathfinding.  
- **Save/Load System:** Supports saving and loading the dungeon state from a file.

---

### 👾 Monster AI & Pathfinding
- **Dijkstra’s Algorithm:** Used for both tunneling and non-tunneling monsters.  
- **Non-tunneling monsters:** Navigate only through walkable paths.  
- **Tunneling monsters:** Dig through walls based on hardness values.  

#### Monster Generation
- Default: `--nummon 10` (up to 20)
- Each monster:
  - Has a **hexadecimal ID** (0–9, a–f)
  - Moves according to a **priority queue** based on speed (1000/speed)
  - Has a speed between **5–20**

#### Monster AI Types
| Bit | Ability | Description |
|:----:|:----------|:-------------|
| 0x1 | Intelligence | Uses Dijkstra’s algorithm for shortest path |
| 0x2 | Telepathy | Always knows PC’s location |
| 0x4 | Tunneling | Can dig through walls |
| 0x8 | Erratic | Moves randomly 50% of the time |

---

### 🧭 Pathfinding
- Maintains **two Dijkstra maps:** one for tunneling and one for non-tunneling monsters.  
- Updates dynamically with PC movement and dungeon changes.  

---

## 🎮 Gameplay Features

### ⚔️ Turn-Based Simulation
- Each entity (PC or monster) acts based on its **speed**.  
- A **priority queue** manages event order for movement and combat.

---

### 💻 Ncurses User Interface
- Provides **real-time rendering**, **keyboard input**, and **automatic screen updates**.  
- Interactive terminal-based UI for movement, combat, and menus.  

### 🎮 PC Controls
| Key | Action |
|:----:|:-----------------------------|
| `ykuhlnbj` or numpad `12346789` | Move |
| `>` / `<` | Use staircase |
| `m` | Open monster list |
| `f` | Toggle fog of war |
| `g` | Enter teleport mode |
| `r` | Random teleport |
| `Q` | Quit game |

---

### 🔦 Fog of War
- Shows only tiles within PC’s light radius.  
- Previously seen areas remain visible in memory.  

---

### 🧍 Teleportation Mode (`g`)
- Move cursor using direction keys.  
- Press `g` again to teleport to the selected location.  
- Press `r` for random teleport.  
- Press `ESC` to cancel.  

---

## 💎 Objects & Items

- Implemented **object template parsing** from `object_desc.txt`.  
- Fields supported: `NAME`, `DESC`, `COLOR`, `TYPE`, `SYMB`, and all 8 dice attributes.  
- Added `ObjectDescription` class as a factory for item generation.  
- Ensured **unique artifact generation** using `generatedArtifacts` set.  
- Objects are rendered with correct **symbols and colors** via ncurses.  

---

## 🎒 PC Inventory & Equipment

### Inventory
- 10 carry slots (`0–9`)

### Equipment
- 12 equipment slots (`a–l`):
  - WEAPON, OFFHAND, RANGED, ARMOR, HELMET, CLOAK, GLOVES, BOOTS, AMULET, LIGHT, RING1, RING2  

### Controls
| Key | Function |
|:----:|:-----------------------------|
| `i` | View inventory |
| `e` | View equipped items |
| `w` | Wear item (swap if slot occupied) |
| `t` | Take off item |
| `d` | Drop item |
| `x` | Expunge item permanently |
| `I` | Inspect item |
| `L` | Look mode (inspect monsters/items) |

---

### 🩸 Combat System
- Multi-round combat with **HP, speed, and damage calculations**.  
- **Bare-handed Damage:** 0 + 1d4  
- **Equipment Damage:** Rolls all equipped items’ dice.  
- **Speed Bonus:** Equipment adds to base speed (10).  
- **Monster/PC Death:** Entities are removed when HP ≤ 0.  

---

### ❤️ HP Regeneration
- PC regenerates **1 HP every 20 turns** (up to max HP = 50).  
- Tracked with `lastHpRegenTurn`.  

---

## 🧠 Look Mode (`L`)
- Enter targeting mode with `L`.  
- Use movement keys to move cursor.  
- Press `t` to view:
  - **Monster:** Symbol, HP, speed, color, and abilities.  
  - **Item:** Name, symbol, color, and description.  

---

## 🛠️ Build & Run Instructions

### 🧩 Build the Project
```bash
make
▶ Run the Game (Default: 10 Monsters)
bash
Copy code
make run
⚙️ Custom Monster Count
bash
Copy code
make run ARGS="--nummon 5"
You can replace 5 with any number up to 20.

🧑‍💻 Technologies Used
Language: C

Library: ncurses

Algorithms: Dijkstra’s, MST, Priority Queue

Paradigm: Procedural and Event-Driven Programming
